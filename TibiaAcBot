TibiaBot
=================================================================================================

Template matching library python: Mahotas and OpenCV

OpenCV seems to have more support and tutorials accepts template matching of multiple objects in
the screen.


Github
=================================================================================================
https://github.com/MuriloChianfa/TibiaAuto12
https://github.com/lucasmonstro/PyTibia

Tasks
=================================================================================================

1. Be able to import the screenshot -> done
2. Be able to process the screenshot with opencv -> done
3. Be able to find your own character in the screen -> done
4. Be able to read your health bar and mana -> done
5. Be able to move -> done
6. Be able to explore
7. Be able to identify battle list and attack
8. Be able to loot dead corpses

CaveBot steps
=================================================================================================

1. Simple cavebot with preregistered instructions to move
2. Be able to map a maze
3. Have some sort of decisions in this maze (randomize between multiple shorter paths)

Issues
=================================================================================================
Since we are using multiple threads attacking the same opened window we should use some
lock system to not walk and heal at the same time

Some of the commands using xdotool are shown in console, is there any silent mode to avoid this without losing the
intented stdout we want to retrieve?

AutoAttack
=================================================================================================
Check if in the battle list exist more than N creatures if so stop walking
Attack the first creature of the battle list because the list is ordered by proximity
Every fps we check a perimeter of 1sqm in all directions of the player analizing creature outlines that
differs from sqm outline
then when the creature is dead we loot it and mark the sqm as looted

The Game Window can render a maximum of 15 × 11 square meters (fields) with the size of 32 × 32 pixels each,
if not enlarged or reduced.

Find the character feet, we assume the feet are in the center of a sqm, so it means we have to sum 16 px + 32 in all
directions to get the full box

        if cv2.waitKey(1):
            cv2.destroyAllWindows()

        # draw the bounding box on the image
        cv2.rectangle(actual_position, (start_x - 40, start_y - 40), (end_x, end_y), (255, 0, 0), 1)
        # show the output image
        cv2.imshow("Output", actual_position)
        cv2.waitKey(0)